const User = require("../models/User")

const onStart = async (bot, msg) => {
   if (!(await User.findOne({ username: msg.from.username }))) {
      await new User({ username: msg.from.username, chat: msg.chat.id }).save()
   } else {
      await User.updateOne({ username: msg.from.username }, { chat: msg.chat.id })
   }
   await bot.sendMessage(msg.chat.id, "ü§ñ")
   await bot.sendMessage(
      msg.chat.id,
      '<b>–ü—Ä–∏–≤–µ—Ç, —è - —á–∞—Ç-–±–æ—Ç –∫–æ—Ñ–µ–π–Ω–∏ BladburyCoffee</b>\n\n—è –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –≤–∞–º –æ –º–µ–Ω—é –º–æ–µ–π –∫–æ—Ñ–µ–π–Ω–∏, –∞–¥—Ä–µ—Å–µ –∏ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã. –¢–∞–∫ –∂–µ —è –æ—Ç–∫—Ä—ã–≤–∞—é –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ –∫–æ—Ñ–µ–π–Ω–∏, —É–≤–µ—Ä–µ–Ω —á—Ç–æ –æ–Ω–∞ –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç \n\n–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–º–µ–Ω—é" –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç "–º–µ–Ω—é", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —è –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å',
      {
         parse_mode: "HTML",
         reply_markup: {
            keyboard: [["–º–µ–Ω—é"]],
            resize_keyboard: true,
         },
      }
   )
   if (msg.text.split(" ")[1] != undefined) {
      username = msg.text.split(" ")[1]
      if (username == msg.from.username) return 0
      usernameRefs = await User.findOne({ username }).then((data) => data.refs)
      if (usernameRefs.includes(msg.from.username)) return 0
      newUsernameRefs = [...usernameRefs, msg.from.username]
      await User.updateOne({ username }, { refs: newUsernameRefs })
      await bot.sendMessage(
         msg.chat.id,
         `üßë‚Äçüíª <i>—è –Ω–∞—á–∏—Å–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${username} –±–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤–∞—Å –≤ –±–æ—Ç–∞. C–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å –Ω–∞–º–∏!</i>`,
         {
            parse_mode: "HTML",
         }
      )
   }
}

module.exports = onStart

//https://t.me/testBot_Burgers_bot?start=A
